The formula structure is similar to the AST's one, but with restricted formula operations and additional information.
There are, again, 2 types of nodes, 'formula' and 'term'.
Every member variable in the nodes is caluclated in building, so e.g. the hash code getting is constant.

class formula
{
public:
    enum class operation_type : char
    {
        constant_true,
        constant_false,
        conjunction,
        disjunction,
        negation,
        measured_less_eq,
        eq_zero,
        c
    };

    operation_type op_;
    formula_mgr* formula_mgr_;
    std::size_t hash_;

    // For simplicity raw pointers and union, a better solution would be unique pointers and variants
    struct child_formulas
    {
        formula* left;
        formula* right;
    };
    struct child_terms
    {
        term* left;
        term* right;
    };
    union {
        child_formulas child_f_;
        child_terms child_t_;
    };

    auto build(const NFormula& f) -> bool;

    auto operator==(const formula& rhs) const -> bool;
    auto operator!=(const formula& rhs) const -> bool;

    // Evalates the formula but ignores all measured less or equal atomic formulas, as if there were not existing
    auto evaluate(const variable_id_to_points_t& evals, const contacts_t& contact_relations) const -> bool;
};

class term
{
public:
    enum class operation_type : char
    {
        constant_true,
        constant_false,
        union_,
        intersection,
        complement,
        variable
    };

    operation_type op_;
    const formula_mgr* formula_mgr_; // Used to make a bitmask for the used variables in the term(w.r.t all variables in the whole formula) and to print the term with it's variable names instead of their (optimized) IDs.
    variables_mask_t variables_; // All used variables in the term.

    // For simplicity raw pointers and union, a better solution would be unique pointers and variants
    struct childs
    {
        term* left;
        term* right;
    };
    union {
        childs childs_;
        size_t variable_id_;
    };

    std::size_t hash_;

    auto build(const NTerm& t) -> bool;

    auto operator==(const term& rhs) const -> bool;
    auto operator!=(const term& rhs) const -> bool;

    auto evaluate(const variable_id_to_points_t& variable_evaluations, const size_t points_count) const -> model_points_set_t;

    // Evaluates the term with the provided variables evaluations but if some of the used variables in the term do not have evaluations
    // it creates a smaller subterm with the unknown variables.
    // Note that it reduces the term's constants, e.g. '1 + X' -> '1' and does not look at the X's evaluation at all.
    // With the latest algorithms, this is not used.
    auto evaluate(const variables_evaluations_block& evaluation_block, bool skip_subterm_creation = false) const -> evaluation_result;
};

The building is trivial, based on the AST node's operation types.
Each node has a hash code (for future uses in some 'maps') and each term has variable mask for all used variables in the term(and it's child temrs)

If for two formulas/terms, their hash code are same, then it will compare the content of all nodes in order to really find out if they are the same formulas.
Note that it's not necessary lenear, because we have to support the comutativity of Contacts, i.e. C(a,b) == C(b,a). So it will check the equality of contact terms two times (instead of just one).
I.e. C(a, b) == C(c, d) => (a == c && b == d) v (a == d && b == c).

To evaluate formula node we need all evaluations of the variables in it and the contacts between the model points.
    A vector of size the number of variables in the formula, each element is a set of points, represented as a bitset.
    Keeps the variable evaluations, i.e. v(p).

    Model evaluation 'v' which for a given term returns a subset of the model points.
     - v(p) = { i | (i) (xxx...x)[p] == 1, i.e. in point 'i' the evaluation of the variable 'p' is 1 },
    where 'p' is a variable(for optimzations it's an id of the string representation of that variable)
     - v(a * b) = v(a) & v(b)
     - v(a + b) = v(a) | v(b)
     - v(-a) = ~v(a)

    For example, let us have the following formula: C(a * b, c) & c != 0 & -a != 0
    Then a model could be the following:
        (110) (a * b) 0---1 (c) (001)
        (011) (c)  2
        (000) (-a) 3
    Let assume that 'a' has a variable id 0, 'b' has id 1 and 'c' has id 2.
    The bit matrix will be the following:
        \ 012     // variable ids (rows) \ model points (columns)
        0 100     // v(a) = { 0 }, i.e. all points which have evaluation with bit at positon 0 set to 1
        1 101     // v(b) = { 0, 2 }, ... at position 1 ...
        2 011     // v(c) = { 1, 2 }, ... at position 2 ...

    The contacts between the model points is represented via a symetric square bit matrix. contacts_[i] gives a bit mask of all points which are in contact with the point 'i'.
    For example, let us have a model with 6 points:
        0---1
        2---3
        4
        5
    The bit matrix will be the following:
        \ 012345
        0 110000    // from 0---1 and reflexivity (0---0)
        1 110000    // from 1---0 and reflexivity (1---1)
        2 001100    // from 2---3 and reflexivity (2---2)
        3 001100    // from 3---2 and reflexivity (3---3)
        4 000010    // just reflexivity (4---4)
        5 000001    // just reflexivity (5---5)

The formula evaluation is simple and is used only to double check that the produced model satisfies the formula.
The term evaluation is used to generate the models in a way in which it does not break some of the atomic formulas.

auto term::evaluate(const variable_id_to_points_t& variable_evaluations, const size_t points_count) const -> model_points_set_t // gives a set of model points(as bitmask)
{
    switch(op_)
    {
        case operation_t::constant_true:
            return ~model_points_set_t(points_count); // empty set
        case operation_t::constant_false:
            return model_points_set_t(points_count); // whole set
        case operation_t::union_:
            assert(childs_.left && childs_.right);
            return childs_.left->evaluate(variable_evaluations, points_count) |
                   childs_.right->evaluate(variable_evaluations, points_count);
        case operation_t::intersection:
            assert(childs_.left && childs_.right);
            return childs_.left->evaluate(variable_evaluations, points_count) &
                   childs_.right->evaluate(variable_evaluations, points_count);
        case operation_t::complement:
            assert(childs_.left);
            return ~childs_.left->evaluate(variable_evaluations, points_count);
        case operation_t::variable:
            assert(variable_id_ < variable_evaluations.size());
            return variable_evaluations[variable_id_]; // returns the evaluation for the variable
    }
}

The building of the whole formula(in formula_mgr) has some optional parameters, for which AST refiners to use.

enum class formula_refiners : int32_t
{
    none                                    = 0,
    convert_contact_less_eq_with_same_terms = 1 << 1,
    convert_disjunction_in_contact_less_eq  = 1 << 2,
    reduce_constants                        = 1 << 3,
    reduce_contacts_with_constants          = 1 << 4,
    remove_double_negation                  = 1 << 5,
    all = convert_contact_less_eq_with_same_terms | convert_disjunction_in_contact_less_eq | reduce_constants | reduce_contacts_with_constants | remove_double_negation
};

auto formula_mgr::build(const std::string& f, const formula_refiners& refiners_flags) -> bool
{
    // Parsing the formula
    parser_error_info error_info;
    auto formula_AST = parse_from_input_string(f.c_str(), error_info);
    if(!formula_AST)
    {
        std::stringstream error_msg;
        error_info.printer(f, error_msg);
        info() << "\n" << error_msg.str();
        return false;
    }

    std::stringstream info_buff;
    info_buff << "Parsed formula: ";
    VPrinter printer(info_buff);
    formula_AST->accept(printer);
    info_buff << "\n";

    VConvertImplicationEqualityToConjDisj convertor;
    formula_AST->accept(convertor);
    info_buff << "Converted (-> <->)        : ";
    formula_AST->accept(printer);

    // NOTE: Consider making VSplitDisjInLessEqAndContacts and VSplitDisjInLessEqAndContacts combined
    // because in some intermediate splitting the two terms might match
    // Nevertheless, this will still be not 100% sufficient because the order of spliting might take a big role and
    // skip some pontential matches. For not just convert them after the splitting. It's just a small optimization.
    if(has_flag(refiners_flags, formula_refiners::convert_contact_less_eq_with_same_terms))
    {
        VConvertLessEqContactWithEqualTerms convertor_lessEq_contact_with_equal_terms;
        formula_AST->accept(convertor_lessEq_contact_with_equal_terms);
        info_buff << "Converted C(a,a);<=(a,a)  : ";
        formula_AST->accept(printer);
    }

    if(has_flag(refiners_flags, formula_refiners::convert_disjunction_in_contact_less_eq))
    {
        VSplitDisjInLessEqAndContacts disj_in_contact_splitter;
        formula_AST->accept(disj_in_contact_splitter);
        info_buff << "C(a+b,c)->C(a,c)|C(b,c) ;\n";
        info_buff << "<=(a+b,c)-><=(a,c)&<=(b,c): ";
        formula_AST->accept(printer);
    }

    if(has_flag(refiners_flags, formula_refiners::convert_contact_less_eq_with_same_terms))
    {
        VConvertLessEqContactWithEqualTerms convertor_lessEq_contact_with_equal_terms;
        formula_AST->accept(convertor_lessEq_contact_with_equal_terms);
        info_buff << "Converted C(a,a);<=(a,a)  : ";
        formula_AST->accept(printer);
    }

    VConvertLessEqToEqZero eq_zero_convertor;
    formula_AST->accept(eq_zero_convertor);
    info_buff << "Converted (<= =0) formula : ";
    formula_AST->accept(printer);

    if(has_flag(refiners_flags, formula_refiners::reduce_constants))
    {
        VReduceConstants trivial_reducer;
        formula_AST->accept(trivial_reducer);
        info_buff << "Reduced constants         : ";
        formula_AST->accept(printer);
    }

    if(has_flag(refiners_flags, formula_refiners::reduce_contacts_with_constants))
    {
        VConvertContactsWithConstantTerms contacts_with_constant_as_term_convertor;
        formula_AST->accept(contacts_with_constant_as_term_convertor);
        info_buff << "Converted C(a,1)->~(a=0)  : ";
        formula_AST->accept(printer);
    }

    if(has_flag(refiners_flags, formula_refiners::remove_double_negation))
    {
        VReduceDoubleNegation double_negation_reducer;
        formula_AST->accept(double_negation_reducer);
        info_buff << "Reduced double negation   : ";
        formula_AST->accept(printer);
    }

    info() << info_buff.str();

    // Will cash all variables and when building the formula tree we will use their ids instead of the heavy strings
    VVariablesGetter::variables_set_t variables;
    VVariablesGetter variables_getter(variables);
    formula_AST->accept(variables_getter);

    variables_.reserve(variables.size());
    variable_to_id_.reserve(variables.size());
    for(const auto& variable : variables)
    {
        variable_to_id_[variable] = variables_.size();
        variables_.emplace_back(variable);
    }

    return f_.build(*formula_AST); // The building of the formula from it's AST
}


