We are using tableau method to find contradictions in the formula.

TODO: explain standard tableau - the same as Tinko explained to us

We keep 8 collections:
    - formulas_T_ - T formulas, e.g. C(a,b) | <=(a,b)
    - formulas_F_ - F formulas, e.g. ~(C(a,b) | <=(a,b)), we will keep just (C(a,b) | <=(a,b)) and we will know that we want it to be false(F).
    - contacts_T_ - T contact atomic formulas, e.g. C(a,b)
    - contacts_F_ - F contact atomic formulas
    - zero_terms_T_ - T zero terms, e.g. (t1 + t2)=0
    - zero_terms_F_ - F zero terms
    - measured_less_eq_T_ - T <=m atomic formulas
    - measured_less_eq_F_ - F <=m atomic formulas

Each collection is a unordered_map, i.e. hashmap, which stores the formulas by pointers to them, uses their precalculated hash and operator== to compare them.
Avg. complexity O(1) for search, insert, erase.

Invariant - at any time, all formulas in the collections does not contradict.
A contradiction can occure if we split some formula and some to it's components and any of them contradicts with some of the other formulas in the collections.
E.g. if we have C(a,b) in contacts_T_ and we are splitting (T & ~C(a,b)) then ~C(a,b) will contradict with C(a,b) from contacts_T_ collection.
At first, we are inserting the whole formula in T formulas(if it's constant false - returns directly false, etc.)

Almost as in the standard implementation, but with additional a few additional rules:
    - for the constants true/false
    - the comutativity of the contacts - C(a,b) == C(b,a)
    - adding atomic formula of type: C(a,b) checks that there are not already added a = 0 OR b = 0 because it would be a contradictions
    - adding atomic formula of type: a=0 checks if there is T(C(a,_)) or T(C(_,a)), i.e. checks if there is a contact term 'a'

The checks when adding contact/=0 atomic formula is done effectively (constant time) via additional collection, multiterms_t contact_T_terms_,
which keeps the terms of the T contacts(the contacts in @contacts_T_), i.e. for each T(C(a,b)) : a, b are in the collection.
They are checked via the auto has_broken_contact_rule(const formula* f) const -> bool; method

We have a few handy functions:
    - auto find_in_T(const formula* f) const -> bool
        Searches the formula 'f' in T collections depending on the type of 'f':
            - contact - in contacts_T_
            - <=(a) - searches 'a' in zero_terms_T_
            - <=m - in measured_less_eq_T_
            - conj. disj. or negation in formulas_T_
        Note that it is not used to search constants, they should be handled separately.
    - auto find_in_F(const formula* f) const -> bool;
        Analogous to find_in_T but in F collections
    - void add_formula_to_T(const formula* f)
        Adds the formula 'f' in T collections depending on the type of 'f':
            - contact - in contacts_T_ and adds it's two terms to the contact_T_terms_ collection
            - <=(a) - adds 'a' in zero_terms_T_
            - <=m - in measured_less_eq_T_
            - conj. disj. or negation in formulas_T_
        Note that it skips the constants.
    - void add_formula_to_F(const formula* f)
        Analogous to add_formula_to_T but in F collections
    - void remove_formula_from_T(const formula* f)
        Removes the formula 'f' from T collections depending on the type of 'f':
            - contact - from contacts_T_ and removes it's two terms from the contact_T_terms_ collection (note that it's a multiset, only one occurrence of them will be removed)
            - <=(a) - removes 'a' from zero_terms_T_
            - <=m - from measured_less_eq_T_
            - conj. disj. or negation from formulas_T_
        Note that it skips the constants.
    - void remove_formula_from_F(const formula* f)
        Analogous to remove_formula_from_T but from F collections

The algoritmh:

auto tableau::satisfiable_step() -> bool
{

The bottom the the recursive algorithm is when we have only atomic formulas(which does not contradicts). Then we can run algorithms for model construction.
    if(formulas_T_.empty() && formulas_F_.empty())
    {
        return has_satisfiable_model();
    }

    if(!formulas_T_.empty())
    {
        // Choosing some formula to handle in this step.
        // If this branch does not produce a valid satisfiable path, then this formula will be returned to formulas_T_
        auto f = *formulas_T_.begin();

        const auto op = f->get_operation_type();
        if(op == op_t::negation)
        {
            // T(~X) -> F(X)
            auto X = f->get_left_child_formula();
            if(X->is_constant())
            {
                // F(T) is not satisfiable
                if(X->is_constant_true())
                {
                    return false;
                }
                return satisfiable_step(); // F(F) is satisfiable, continue with the rest
            }

            if(find_in_T(X)) // contradiction, we want to satisfy F(X) but we already have to satisfy T(X)
            {
                return false;
            }

            if(find_in_F(X)) // skip adding it multiple times
            {
                return satisfiable_step();
            }

            add_formula_to_F(X);
            auto res = satisfiable_step();
            remove_formula_from_F(X);
            return res;
        }

        if(op == op_t::conjunction)
        {
            // T(X & Y) -> T(X) & T(Y)
            T_conjuction_child X(*this, f->get_left_child_formula());
            T_conjuction_child Y(*this, f->get_right_child_formula());

            if(!X.validate()) // Checks if X breaks the contact rule or brings a contradiction
            {
                return false;
            }
            X.add_to_T(); // Adds X to T collection

            if(!Y.validate())
            {
                X.remove_from_T();
                return false;
            }
            Y.add_to_T();

            auto res = satisfiable_step();
            X.remove_from_T();
            Y.remove_from_T();

            return res;
        }

        assert(op == op_t::disjunction);

        // T(X v Y) -> T(X) v T(Y)
        auto X = f->get_left_child_formula();
        auto Y = f->get_right_child_formula();
        trace() << "Will split to two subtrees: " << *X << " and " << *Y;

        // T(T) is satisfiable and we can skip the other branch
        if(X->is_constant_true() || Y->is_constant_true())
        {
            trace() << "One of the childs is constant true";
            return satisfiable_step();
        }

        auto process_T_disj_child = [&](const formula* child) {
            if(child->is_constant_false() || // T(F) is not satisfiable
               find_in_F(child) || has_broken_contact_rule(child))
            {
                return false;
            }

            if(find_in_T(child)) // skip adding it multiple times
            {
                return satisfiable_step();
            }

            add_formula_to_T(child);
            const auto res = satisfiable_step();
            remove_formula_from_T(child);
            return res;
        };

        trace() << "Start of the left subtree: " << *X << " of " << *f;
        if(process_T_disj_child(X))
        {
            return true; // there was no contradiction in the left path, so there is no need to continue with
                         // the right path
        }

        trace() << "Start of the right subtree: " << *Y << " of " << *f;
        return process_T_disj_child(Y);
    }

    // Almost analogous but taking a formula from Fs

    // Choosing some formula to handle in this step.
    // If this branch does not produce a valid satisfiable path, then this formula will be returned to formulas_F_
    auto f = *formulas_F_.begin();

    const auto op = f->get_operation_type();
    if(op == op_t::negation)
    {
        // F(~X) -> T(X)
        auto X = f->get_left_child_formula();
        if(X->is_constant())
        {
            // T(F) is not satisfiable
            if(X->is_constant_false())
            {
                return false;
            }
            return satisfiable_step(); // T(T) is satisfiable, continue with the rest
        }
        if(find_in_F(X)) // contradiction, we want to satisfy T(X) but we already have to satisfy F(X)
        {
            return false;
        }

        if(has_broken_contact_rule(X)) // We will add T(X) where X might be Contact or =0 term, so we need to verify that we will not break the contact rule
        {
            return false;
        }

        if(find_in_T(X)) // skip adding it multiple times
        {
            return satisfiable_step();
        }

        add_formula_to_T(X);
        auto res = satisfiable_step();
        remove_formula_from_T(X);
        return res;
    }

    if(op == op_t::disjunction)
    {
        // F(X v Y) -> F(X) & F(Y)
        F_disjunction_child X(*this, f->get_left_child_formula());
        F_disjunction_child Y(*this, f->get_right_child_formula());

        if(!X.validate()) // Checks that X does not bring a contradiction
        {
            return false;
        }
        X.add_to_F();

        if(!Y.validate())
        {
            X.remove_from_F();
            return false;
        }
        Y.add_to_F();

        auto res = satisfiable_step();

        X.remove_from_F();
        Y.remove_from_F();

        return res;
    }

    assert(op == op_t::conjunction);

    // F(X & Y) -> F(X) v F(Y)
    auto X = f->get_left_child_formula();
    auto Y = f->get_right_child_formula();

    trace() << "Will split to two subtrees: " << *X << " and " << *Y;

    // F(F) is satisfiable and we can skip the other branch
    if(X->is_constant_false() || Y->is_constant_false())
    {
        trace() << "One of the childs is constant false";
        return satisfiable_step();
    }

    auto process_F_conj_child = [&](const formula* child) {
        if(child->is_constant_true() || // F(T) is not satisfiable
           find_in_T(child))
        {
            return false;
        }
        if(find_in_F(child)) // skip adding it multiple times
        {
            return satisfiable_step();
        }

        add_formula_to_F(child);
        const auto res = satisfiable_step();
        remove_formula_from_F(child);
        return res;
    };

    trace() << "Start of the left subtree: " << *X << " of " << *f;
    if(process_F_conj_child(X))
    {
        return true; // there was no contradiction in left path, so there is no need to continue with the
                     // right path
    }

    trace() << "Start of the right subtree: " << *Y << " of " << *f;
    return process_F_conj_child(Y);
}
